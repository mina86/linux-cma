<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Copyright (c) 2012 by Michal Nazarewicz (mina86@mina86.com) -->
<!-- Distributed under the terms of the Creative Commons
     Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0) license. -->
<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:cc="http://creativecommons.org/ns#"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
     width="1800px" height="300px" viewBox="0 0 1800 300" version="1.1">
  <metadata>
    <rdf:RDF>
      <cc:Work dc:format="image/svg+xml"
               dc:title="Alokatory Linuksa"
               dc:description="Przedstawienie alokatorów pamięci dostępnych w jądrze Linux."
               dc:language="pl"
               cc:attributionName="Michał Nazarewicz"
               cc:attributionURL="http://mina86.com/">
        <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:creator>
          <dc:Agent>
            <dc:title>Michał Nazarewicz</dc:title>
          </dc:Agent>
        </dc:creator>
        <dc:rights>
          <dc:Agent>
            <dc:title>CC-BY-SA</dc:title>
          </dc:Agent>
        </dc:rights>
        <cc:license rdf:resource="http://creativecommons.org/licenses/by-sa/3.0/" />
      </cc:Work>
      <cc:License rdf:about="http://creativecommons.org/licenses/by-sa/3.0/">
        <cc:permits rdf:resource="http://creativecommons.org/ns#Reproduction" />
        <cc:permits rdf:resource="http://creativecommons.org/ns#Distribution" />
        <cc:requires rdf:resource="http://creativecommons.org/ns#Notice" />
        <cc:requires rdf:resource="http://creativecommons.org/ns#Attribution" />
        <cc:permits rdf:resource="http://creativecommons.org/ns#DerivativeWorks" />
        <cc:requires rdf:resource="http://creativecommons.org/ns#ShareAlike" />
      </cc:License>
    </rdf:RDF>
  </metadata>

  <style>
    text {
      font-family: DejaVu Sans;
      font-size: 15px;
      font-style: normal;
      font-variant: normal;
      font-weight: bold;
      font-stretch: normal;
      fill: #000;
      stroke: none;
      text-align: center;
      text-anchor: middle;
    }
    .links text {
      font-size: 10px;
      font-weight: normal;
    }
    .atStart {
      text-align: left;
      text-anchor: start;
    }
    .atEnd {
      text-align: right;
      text-anchor: end;
    }
    rect {
      fill: #FFF;
      stroke: #000;
      stroke-width: 1;
    }
    path {
      stroke-width: 1;
      fill: #000;
      stroke: #000;
    }
    path.maybe {
      stroke-dasharray: 2, 2;
    }
  </style>

  <defs>
    <path id="arrow-give"  d="M0,0 l-5,-20 h10 z" style="fill: #FFF" />
    <path id="arrow-cma"   d="M0,0 l-5,-20 h10 z" />
    <path id="arrow-take"  d="M-5,0 h10 l-5,-20 z" style="fill: #FFF" />
    <path id="arrow-use"   d="m0,0 l-5,-20 5,5 5,-5 z" />
    <path id="arrow-maybe" d="m0,0 l-5,-20 5,5 5,-5 z" />

    <g class="boxes" id="boxes-important">
      <rect x=" 10" y=" 10" width="140" height=" 30" />
      <text x=" 80" y=" 30">memblock</text>
      <rect x="230" y=" 80" width="140" height=" 30" />
      <text x="300" y="100">alokator stron</text>
      <rect x="450" y=" 10" width="140" height=" 30" />
      <text x="520" y=" 30">DMA API</text>
    </g>
    <g class="boxes" id="boxes-rest">
      <rect x="160" y="160" width="140" height=" 30" />
      <text x="230" y="180">kmalloc()</text>
      <rect x="400" y="160" width="140" height=" 30" />
      <text x="470" y="180">vmalloc()</text>
      <rect x="100" y="240" width="140" height=" 30" />
      <text x="170" y="260">kmem_cache</text>
      <rect x="340" y="260" width="140" height=" 30" />
      <text x="410" y="280">mempool</text>
    </g>
    <g class="boxes" id="boxes-cma">
      <rect x="230" y="260" width="140" height=" 30" />
      <text x="300" y="280">CMA</text>
    </g>

    <g class="links" id="links-important">
      <path d="M 127.14286,  40.00000 L 252.85714,  80.00000" id="p0" class="give" pathLength=" 131.92453"/>
      <use transform="translate( 252.85714   80.00000) rotate( -72.35)" xlink:href="#arrow-give"/>
      <text class="atStart" dy="-5"><textPath startOffset="  25.00000" xlink:href="#p0">oddaje pamięć do</textPath></text>
      <path d="M 347.14286,  80.00000 L 472.85714,  40.00000" id="p1" class="maybe" pathLength=" 131.92453"/>
      <use transform="translate( 347.14286   80.00000) rotate(  72.35)" xlink:href="#arrow-maybe"/>
      <text class="atEnd" dy="-5"><textPath startOffset=" 106.92453" xlink:href="#p1">może używać</textPath></text>
    </g>
    <g class="links" id="links-rest">
      <path d="M 243.12500, 160.00000 L 286.87500, 110.00000" id="p2" class="use" pathLength="  66.43841"/>
      <use transform="translate( 286.87500  110.00000) rotate(-138.81)" xlink:href="#arrow-use"/>
      <text class="atStart" dy="-5"><textPath startOffset="  16.60960" xlink:href="#p2">używa</textPath></text>
      <path d="M 331.87500, 110.00000 L 438.12500, 160.00000" id="p3" class="use" pathLength=" 117.42684"/>
      <use transform="translate( 331.87500  110.00000) rotate( 115.20)" xlink:href="#arrow-use"/>
      <text class="atEnd" dy="-5"><textPath startOffset="  92.42684" xlink:href="#p3">używa</textPath></text>
      <path d="M 181.25000, 240.00000 L 218.75000, 190.00000" id="p4" class="use" pathLength="  62.50000"/>
      <use transform="translate( 218.75000  190.00000) rotate(-143.13)" xlink:href="#arrow-use"/>
      <text class="atStart" dy="-5"><textPath startOffset="  15.62500" xlink:href="#p4">używa</textPath></text>
      <path d="M 240.00000, 260.83333 L 340.00000, 269.16667" id="p5" class="maybe" pathLength=" 100.34662"/>
      <use transform="translate( 240.00000  260.83333) rotate(  94.76)" xlink:href="#arrow-maybe"/>
      <text class="atEnd" dy="-5"><textPath startOffset="  75.34662" xlink:href="#p5">może używać</textPath></text>
      <path d="M 257.00000, 190.00000 L 383.00000, 260.00000" id="p6" class="maybe" pathLength=" 144.13882"/>
      <use transform="translate( 257.00000  190.00000) rotate( 119.05)" xlink:href="#arrow-maybe"/>
      <text class="atEnd" dy="-5"><textPath startOffset=" 119.13882" xlink:href="#p6">może używać</textPath></text>
    </g>
    <g class="links" id="links-cma">
      <path d="M 350.80000, 260.00000 L 509.20000,  40.00000" id="p7" class="use" pathLength=" 271.09142"/>
      <use transform="translate( 350.80000  260.00000) rotate(  35.75)" xlink:href="#arrow-use"/>
      <text class="atEnd" dy="-5"><textPath startOffset=" 246.09142" xlink:href="#p7">używa</textPath></text>
      <path d="M  90.80000,  40.00000 L 249.20000, 260.00000" id="p8" class="take" pathLength=" 271.09142"/>
      <use transform="translate(  90.80000   40.00000) rotate( 144.25)" xlink:href="#arrow-take"/>
      <text class="atEnd" dy="-5"><textPath startOffset=" 246.09142" xlink:href="#p8">bierze pamięć z</textPath></text>
      <path d="M 330.00000, 260.00000 v-150.00000" id="p9" class="cma" pathLength=" 150.00000"/>
      <use transform="translate( 330.00000  110.00000) rotate(-180.00)" xlink:href="#arrow-cma"/>
      <text class="atStart" dy="-5"><textPath startOffset="  25.00000" xlink:href="#p9">integruje się z</textPath></text>
      <path d="M 270.00000, 260.00000 v-150.00000" id="p10" class="give" pathLength=" 150.00000"/>
      <use transform="translate( 270.00000  110.00000) rotate(-180.00)" xlink:href="#arrow-give"/>
      <text class="atStart" dy="-5"><textPath startOffset="  25.00000" xlink:href="#p10">oddaje pamięć do</textPath></text>
    </g>
  </defs>

  <g id="base">
    <use x="   0" xlink:href="#boxes-important"/>
    <use x="   0" xlink:href="#boxes-rest"/>
    <use x="   0" xlink:href="#links-important"/>
    <use x="   0" xlink:href="#links-rest"/>
  </g>
  <g id="important">
    <use x=" 600" xlink:href="#boxes-important"/>
    <use x=" 600" xlink:href="#boxes-rest" style="opacity:0.2"/>
    <use x=" 600" xlink:href="#links-important"/>
    <use x=" 600" xlink:href="#links-rest" style="opacity:0.2"/>
  </g>
  <g id="cma">
    <use x="1200" xlink:href="#boxes-important"/>
    <use x="1200" xlink:href="#boxes-cma"/>
    <use x="1200" xlink:href="#links-important" style="opacity:0.2"/>
    <use x="1200" xlink:href="#links-cma"/>
  </g>
</svg>
<!--
Generated with help of the following:

#include <stdio.h>
#include <string.h>
#include <math.h>


static const int width = 140;
static const int height = 30;
static const int text_y_offset = 20;
static const int verb_y_offset =  5;
static const int verb_x_offset = 25;

static const struct rect {
	int x, y;
	const char *lable, *group;
} rects[] = {
	/* 0 */ {  10,  10, "memblock",       "important" },
	/* 1 */ { 230,  80, "page allocator", NULL },
	/* 2 */ { 450,  10, "the DMA API",    NULL },
	/* 3 */ { 160, 160, "kmalloc()",      "rest" },
	/* 4 */ { 400, 160, "vmalloc()",      NULL },
	/* 5 */ { 100, 240, "kmem_cache",     NULL },
	/* 6 */ { 340, 260, "mempool",        NULL },
	/* 7 */ { 230, 260, "CMA",            "cma" },
	{ 0, 0, NULL },
};


static void arrow(double x, double y, double angle, const char *type) {
	printf("      <use transform=\"translate(%10.5f %10.5f) rotate(%7.2f)\" xlink:href=\"#arrow-%s\"/>\n",
	       x, y, angle, type);
}

static double line(double fx, double fy, double tx, double ty, const char *type, unsigned id) {
	double l = hypot(fx - tx, fy - ty);
	printf("      <path d=\"M%10.5f,%10.5f L%10.5f,%10.5f\" id=\"p%u\" class=\"%s\" pathLength=\"%10.5f\"/>\n",
	       fx, fy, tx, ty, id, type, l);
	return l;
}

static double vertical(double x, double fy, double ty, const char *type, unsigned id) {
	double l = ty - fy;
	printf("      <path d=\"M%10.5f,%10.5f v%10.5f\" id=\"p%u\" class=\"%s\" pathLength=\"%10.5f\"/>\n",
	       x, fy, l, id, type, fabs(l));
	return fabs(l);
}

static void newXY(double a, double b, double &x, double &y, int dx, int dy) {
	dx *= width / 2;
	dy *= height / 2;

	y += dy;
	double nx = y * a + b;
	if (nx >= x - width / 2 && nx <= x + width / 2) {
		x = nx;
	} else {
		x += dx;
		y = (x - b) / a;
	}
}

static void connection(double fx, double fy, double tx, double ty,
		       const char *type) {
	static unsigned id = 0;

	fx += width / 2; fy += height / 2;
	tx += width / 2; ty += height / 2;

	double dx = tx - fx, dy = ty - fy, a = dx / dy, b = fx - a * fy, l;
	/* x = a*y + b */

	newXY(a, b, fx, fy, fx < tx ? 1 : -1, fy < ty ? 1 : -1);
	newXY(a, b, tx, ty, fx < tx ? -1 : 1, fy < ty ? -1 : 1);

	if (fx < tx) {
		l = line(fx, fy, tx, ty, type, id);
	} else if (fx == tx) {
		l = vertical(fx, fy, ty, type, id);
	} else {
		l = line(tx, ty, fx, fy, type, id);
	}

	double k = l / 4 < verb_x_offset ? l / 4 : verb_x_offset;
	arrow(tx, ty, atan2(dx, dy) * -180.0 / 3.1415926535, type);
	printf("      <text class=\"%s\" dy=\"%d\"><textPath startOffset=\"%10.5f\" xlink:href=\"#p%u\">%s</textPath></text>\n",
	       fx > tx ? "atEnd" : "atStart", -verb_y_offset,
	       fx > tx ? l - k : k,
	       id, type + strlen(type) + 1);
	++id;
}

static void connection(int fidx, int tidx, const char *type) {
	connection(rects[fidx].x, rects[fidx].y, rects[tidx].x, rects[tidx].y, type);
}

static void connection_offsetx(int fidx, int tidx, const char *type,
			       double fxd, double txd) {
	connection(rects[fidx].x + fxd, rects[fidx].y,
		   rects[tidx].x + txd, rects[tidx].y, type);
}

static void connection_offsetx(int fidx, int tidx, const char *type,
			       double xd) {
	connection(rects[fidx].x + xd, rects[fidx].y,
		   rects[tidx].x + xd, rects[tidx].y, type);
}

static void group(const char *name, const char *cls, bool &opened) {
	if (name) {
		if (opened) {
			puts("    </g>");
		}
		if (*name) {
			printf("    <g class=\"%s\" id=\"%s-%s\">\n",
			       cls, cls, name);
			opened = true;
		} else {
			opened = false;
		}
	}
}

int main(void) {
	bool group_opened = false;

	for (const struct rect *r = rects; r->lable; ++r) {
		group(r->group, "boxes", group_opened);
		printf("      <rect x=\"%3u\" y=\"%3u\" width=\"%3u\" height=\"%3u\" />\n"
		       "      <text x=\"%3u\" y=\"%3u\">%s</text>\n",
		       r->x, r->y, width, height,
		       r->x + width / 2, r->y + text_y_offset, r->lable);
	}
	group("", NULL, group_opened);

	puts("");
	group("important", "links", group_opened);
	connection(0, 1, "give\0gives memory to");
	connection(2, 1, "maybe\0may use");
	group("rest", "links", group_opened);
	connection(3, 1, "use\0uses");
	connection(4, 1, "use\0uses");
	connection(5, 3, "use\0uses");
	connection(6, 5, "maybe\0may use");
	connection(6, 3, "maybe\0may use");
	group("cma", "links", group_opened);
	connection_offsetx(2, 7, "use\0uses", 0.0, 40.0);
	connection_offsetx(7, 0, "take\0takes memory from", -40.0, 0.0);
	connection_offsetx(7, 1, "cma\0integrates with", 30.0);
	connection_offsetx(7, 1, "give\0gives memory to", -30.0);
	group("", NULL, group_opened);

	return 0;
}
 -->
